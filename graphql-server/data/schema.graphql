type Cliente {
        id: ID
        nombre: String
        apellido: String
        empresa: String
        emails: [Email]
        edad: Int
        tipo: TipoCliente
        pedidos: [Pedido]
    }

    type Pedido {
        producto: String
        precio: Int
    }

    type Email {
        email: String
    }

    """Asigna la categor√≠a del Cliente"""
    enum TipoCliente {
        BASICO
        PREMIUM
    }

    type Query{
        getCliente(id: ID): Cliente
        getClientes(limite: Int): [Cliente]
    }

    input PedidoInput {
        producto: String
        precio: Int
    }

    input EmailInput {
        email: String
    }

    """Campo para clientes nuevos"""
    input ClienteInput {
        id: ID
        nombre: String!
        apellido: String!
        empresa: String!
        emails: [EmailInput]
        edad: Int!
        tipo: TipoCliente!
        pedidos: [PedidoInput]
    }

    """Mutations para crear nuevos clientes"""
    type Mutation {
        #Nombre del resolver, Input con Datos y valor que retorna
        """Te permite crear nuevos clientes"""
        crearCliente(input: ClienteInput): Cliente
        actualizarCliente(input: ClienteInput): Cliente
        eliminarCliente(id: ID!): String
    }